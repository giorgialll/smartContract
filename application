pragma solidity ^0.5.0;


import "./ERC721.sol";
import "./Deposit.sol";


contract Employment is ERC721{
    address owner; //indirizzo del creatore del contratto
    address payable sc_JobOfferManager; // indirizzo del contratto che rappresenta un offerta di lavoro 

    
    constructor() payable public { 
        owner = msg.sender;
    }
    
    //Candidature dei lavoratori 
    struct Applicant{
        address[] applicant;
    }
    
   //ID delle offerte di lavoro svolte dal lavoratore
    struct JobDone{
        uint32[] jobsDone;
    }
    
     //Offerte a cui il lavoratore ha chiesto di aggiungere le ore di lavoro
    struct RequestHours{
        uint32[] idOffer;
        uint[] numberHours;
        
    }
    
 
    
  
    // Mapping necessario per tenere traccia delle ore di lavoro svolte da ciascun lavoratore
    // prende il token dell'offerta e vengono assegnate le ore svolte al lavoratore 
    mapping(uint32 => uint) public workhours; 
    
    /** Mappig che dato l'id dell'offerta di lavoro associa quali sono i candidati **/
    mapping (uint32=> Applicant ) internal _applicantsOf ;
    
     /** Mappig che dato l'id dell'offerta associo la richiesta da parte del lavoratore con il nuemero
     di ore da far aggiungere a quelle svolte
     Le ore sono espresse in minuti in modo da considerare anche il quarto d'ora ecc**/
    mapping (uint32 => uint ) internal _requestHours ;
    
    mapping (address => RequestHours ) internal _requestHoursForEmployer ;

    
    /*Mapping che dato l'address del lavoratore consente di ottenere i lavori svolti*/
    mapping (address => JobDone ) internal _jobsDone ;


    
    /*
     * modifier: onlyEmployer
     * Modificatore per permettere l'esecuzione di certe funzioni solo al datore di lavoro. 
     */
    modifier onlyEmployer(uint32 _tokenId) {
        JobOfferManager app = JobOfferManager(sc_JobOfferManager); 
        address employer = app.ownerOf(_tokenId); /* app Ã¨ una varibile del tipo di contratot JobOfferManager, quindi possiamoottenere l'indirizzo 
                                                            del datore di lavoro usando il metodo */
        
        require(msg.sender == employer);                //Richiede che la funzione che richiama questo modificatore sia esseguita solo dal datore di lavoro
        _;
    }
    
    
    /*
     * function: setJobOfferAddress
     * Imposta l' indirizzo SC JobOfferManager
     **/
    function setJobOfferAddress(address payable offer_addressContract) public {
        require(sc_JobOfferManager == address(0) || sc_JobOfferManager == offer_addressContract );
        sc_JobOfferManager = offer_addressContract;
    }
   
    
     function getJobOfferAddress() public view returns(address payable offer_address ) {
        return sc_JobOfferManager;
    }
    
    function getIsSetJobOfferAddress() public view returns(bool) {
        return sc_JobOfferManager == address(0);
    }
    
     function getIsEqualToJobOfferAddress(address payable offer_addressContract) public view returns(bool) {
        return sc_JobOfferManager == offer_addressContract;
      
    }
    
    
    function getApplicantOf(uint32 _idOffer) public view returns(address[] memory ){
        return _applicantsOf[_idOffer].applicant;
        
    }
    
    function getJobsDone() public view returns(uint32[] memory ){
        return _jobsDone[msg.sender].jobsDone;
        
    }
    
    function getRequestHours(uint32 _idOffer) public view returns(uint _hoursRequest ){
        return _requestHours[_idOffer];
    }
    
    function getRequestHoursForEmplyer() public view returns(uint32[] memory, uint[] memory ){
        return (_requestHoursForEmployer[msg.sender].idOffer , _requestHoursForEmployer[msg.sender].numberHours);
    
    }
    

    
    function getHoursDone(uint32 _idOffer) public view returns(uint _hoursDone ){
        return workhours[_idOffer];
    }
    
    function getHourMissing(uint32 _idOffer) public view returns(uint _hoursMissing ){
        JobOfferManager app = JobOfferManager(sc_JobOfferManager);
        if(workhours[_idOffer] > app.getAmountHours(_idOffer) ){
            return 0;
        }
        else{
            return app.getAmountHours(_idOffer)-workhours[_idOffer];
        }
    }
    
    
    
    
   //In input ho il token riferito all'offerta di lavoro
   function jobCompleted(uint32 _tokenIDOffer) public onlyEmployer(_tokenIDOffer){
        
        JobOfferManager app = JobOfferManager(sc_JobOfferManager);

        require(_tokenIDOffer <= app.getTokenId());

        // Richiede che siano state raggiunte le ore di lavoro 
        uint ore = app.getAmountHours(_tokenIDOffer);
        require(workhours[_tokenIDOffer] >= ore );
        
       uint arrayLength = _applicantsOf[_tokenIDOffer].applicant.length;
        
        for(uint i = 0; i <arrayLength; i ++){
            if(_applicantsOf[_tokenIDOffer].applicant[i] == msg.sender){
                _applicantsOf[_tokenIDOffer].applicant[i] = _applicantsOf[_tokenIDOffer].applicant[arrayLength-1];
                delete _applicantsOf[_tokenIDOffer].applicant[arrayLength-1];
                _applicantsOf[_tokenIDOffer].applicant.length--;
            }
        }
        
        address payable addressWorker = app.getAddressWorker(_tokenIDOffer);
        _jobsDone[addressWorker].jobsDone.push(_tokenIDOffer);


        //i soldi vengono versati al lavoratore 
        app.payment(_tokenIDOffer);
    
       
   }
   /* Funzione che mi permette di aggiornare le ore di un lavoratore
   Verificare se l'offerta ha un lavoratore assegnato 
   */
    function addWorkdays(uint32 _tokenIDOffer, uint _numberOfHours) public onlyEmployer(_tokenIDOffer)  {

        JobOfferManager offer = JobOfferManager(sc_JobOfferManager);
        require(_tokenIDOffer <= offer.getTokenId());
        require(offer.getAddressWorker(_tokenIDOffer) !=  address(0));
        
        workhours[_tokenIDOffer] += _numberOfHours; //incremento il numero di ore svolte dal lavoratore 
        _requestHours[_tokenIDOffer] = 0;
        
      uint arrayLength = _requestHoursForEmployer[msg.sender].idOffer.length;
        
        for(uint i = 0; i <arrayLength; i ++){
            if(_requestHoursForEmployer[msg.sender].idOffer[i] == _tokenIDOffer){
                _requestHoursForEmployer[msg.sender].idOffer[i] = _requestHoursForEmployer[msg.sender].idOffer[arrayLength-1];
                _requestHoursForEmployer[msg.sender].numberHours[i] = _requestHoursForEmployer[msg.sender].numberHours[arrayLength-1];
               delete _requestHoursForEmployer[msg.sender].idOffer[arrayLength-1];
               delete _requestHoursForEmployer[msg.sender].numberHours[arrayLength-1];
                _requestHoursForEmployer[msg.sender].idOffer.length--;
                _requestHoursForEmployer[msg.sender].numberHours.length--;

            }
        }
        
        
        if(workhours[_tokenIDOffer] >= offer.getAmountHours(_tokenIDOffer)){
            jobCompleted(_tokenIDOffer);        
        }

        
    }
    
    /* Funzione che consente al lavoratore di richiedere di aggiungere le ore di lavoro */
    function requestAdditionalHours(uint32 _idOffer, uint8 _numberOfHours) public {
        JobOfferManager offer = JobOfferManager(sc_JobOfferManager); 
        require(_idOffer <= offer.getTokenId());

        require( offer.getAddressWorker(_idOffer) == msg.sender);

        _requestHours[_idOffer] += _numberOfHours;
        
        uint arrayLength = _requestHoursForEmployer[offer.getAddressEmployer(_idOffer)].idOffer.length;
        bool flag = false;
        
        for(uint i = 0; i <arrayLength; i ++){
            if(_requestHoursForEmployer[offer.getAddressEmployer(_idOffer)].idOffer[i] == _idOffer){
                flag = true;
                _requestHoursForEmployer[offer.getAddressEmployer(_idOffer)].numberHours[i] = _requestHours[_idOffer] ;
            }
        }
        if(flag == false){
            _requestHoursForEmployer[offer.getAddressEmployer(_idOffer)].idOffer.push(_idOffer);
            _requestHoursForEmployer[offer.getAddressEmployer(_idOffer)].numberHours.push(_requestHours[_idOffer]);

        }
    }

    
    
    //Funzione che permette al lavoratore di candidarsi a una offerta
    function workerApplies(uint32 _tokenIDOffer) public{
        JobOfferManager offer = JobOfferManager(sc_JobOfferManager); 
        require(_tokenIDOffer <= offer.getTokenId());
        require(offer.getIsActiveOffer(_tokenIDOffer) != false);
        require(offer.getAddressWorker(_tokenIDOffer) ==  address(0));
        for(uint i=0 ; i<_applicantsOf[_tokenIDOffer].applicant.length ; i++ ){
            require(_applicantsOf[_tokenIDOffer].applicant[i] != msg.sender);
        }
        _applicantsOf[_tokenIDOffer].applicant.push(msg.sender);

    }
    
    //Il lavoratore ritira la candidatura relativa a un'offerta
    function withdrawCandidacy(uint32 _tokenIDOffer) public{
        JobOfferManager offer = JobOfferManager(sc_JobOfferManager); 
        require(_tokenIDOffer <= offer.getTokenId());
        require(offer.getIsActiveOffer(_tokenIDOffer) != false);
        require(offer.getAddressWorker(_tokenIDOffer) ==  address(0));

       
        uint arrayLength = _applicantsOf[_tokenIDOffer].applicant.length;
        
        for(uint i = 0; i <arrayLength; i ++){
            if(_applicantsOf[_tokenIDOffer].applicant[i] == msg.sender){
                _applicantsOf[_tokenIDOffer].applicant[i] = _applicantsOf[_tokenIDOffer].applicant[arrayLength-1];
                delete _applicantsOf[_tokenIDOffer].applicant[arrayLength-1];
                _applicantsOf[_tokenIDOffer].applicant.length--;
            }
        }
    }

    
}

